/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.ruppyrup.javapoet.plugin

import org.apache.commons.io.FileUtils
import org.gradle.testkit.runner.GradleRunner
import spock.lang.Specification
import spock.lang.TempDir
import org.apache.commons.io.IOUtils

import java.nio.charset.Charset;
import java.nio.file.Path

/**
 * A simple functional test for the 'tasktimer.greeting' plugin.
 */
class BuildersFunctionalTest extends Specification {
    @TempDir
    private File projectDir

    private getBuildFile() {
        new File(projectDir, "build.gradle")
    }

    private getSettingsFile() {
        new File(projectDir, "settings.gradle")
    }

    def "can run task"() {
        given:
        settingsFile << ""
        buildFile << """
plugins {
    id 'java-library'
    id 'com.ruppyrup.javapoet.plugin.poetBuilder'
}


println System.getProperty("user.dir")


poetBuilder {
    schemaDir = 'src/functionalTest/resources/schemas'
    outputDir = "${projectDir.getPath()}"
}
"""

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("generateBuilders")
        runner.withProjectDir(projectDir)
        def result = runner.build()

        then:
        def path = projectDir.toPath().resolve("com/ruppyrup/javapoet/schema1/Parent.java")
        String person = IOUtils.toString(path.toUri(), Charset.defaultCharset())

//        String expected = new String(Files.readAllBytes(Paths.get("expected/bob.txt")))
//        InputStream fisTargetFile = new InputStream(new File("expected/bob.txt"));
//        def expected = IOUtils.toString(fisTargetFile, Charset.defaultCharset())
        def expected = FileUtils.readFileToString(new File("src/functionalTest/resources/expected/Parent_Expected.txt"), Charset.defaultCharset())

        person == expected
    }
}
