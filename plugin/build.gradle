plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'com.netflix.nebula.info' version '13.0.0'
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

dependencies {
    implementation project(':app')
    implementation project(':parser')
    implementation project(':schema')
    implementation project(':maker')
    implementation 'commons-io:commons-io:2.15.1'
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    functionalTestImplementation('commons-io:commons-io:2.15.1')
    functionalTestImplementation 'org.assertj:assertj-core:3.6.1'
}


// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

gradlePlugin {
    // Define the plugin
    plugins {
        poetBuilder {
            id = 'com.ruppyrup.javapoet.plugin.poetBuilder'
            implementationClass = 'com.ruppyrup.javapoet.plugin.Schema2BuilderPlugin'
        }
    }
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

//jar.finalizedBy(publishToMavenLocal)

jar {
    finalizedBy publishToMavenLocal
    manifest {
        attributes (
                'Version'  : project.version
        )
    }
}